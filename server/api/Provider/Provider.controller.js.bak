'use strict';

var _           = require('lodash');
var aync        = require('async');
var Provider    = require('./Provider.model')['model'];
var Email       = require('./Email.model')['model'];
var Phone       = require('./Phone.model')['model'];
var request     = require('request');
var url         = require('url');
var service_url = 'http://127.0.0.1:5000'

function getQuery(req) {
  var url_parts = url.parse(req.url, true);
  return url_parts.query;
}
// Get list of Providers
exports.careTeam = function(req, res) {
  var query = getQuery(req);
  var options = {
    url : service_url + '/2.0/zero/getCareTeam2',
    qs  : query
  };

  request(options, function (error, response, body) {
    if (!error && response.statusCode == 200) {
      var careTeam_result = JSON.parse(body);
      console.log(JSON.stringify(careTeam_result));
      var careTeam_output = [];
      careTeam_result.forEach(function(member) {
        Provider.findOne({cwid:member.cwid}, function(err,person) {
          if (person) {
            careTeam_output.push(person);
            console.log(person);
          } else {
            var phone = null;
            var officePhoneArray = [];
            member.officePhone.forEach(function(phoneNum) {
              Phone.findOne({number: phoneNum, kind: "officePhone"}, function(err, officePhone) {
                if (!officePhone) {
                  phone = Phone({number : phoneNum, note : "", kind : "officePhone"});
                  phone.save();
                  officePhoneArray.push(phone);
                }
              });
            });

            var mobilePhoneArray = [];
            member.mobilePhone.forEach(function(phoneNum) {
              Phone.findOne({number: phoneNum, kind: "mobilePhone"}, function(err, mobilePhone) {
                if (!mobilePhone) {
                  phone = Phone({number : phoneNum, note : "", kind : "mobilePhone"});
                  phone.save();
                  mobilePhoneArray.push(phone);
                }
              });
            });

            var pagerNumArray = [];
            member.pagerNum.forEach(function(phoneNum) {
              Phone.findOne({number: phoneNum, kind: "pagerNum"}, function(err, pagerNum) {
                if (!pagerNum) {
                  phone = Phone({number : phoneNum, note : "", kind : "pagerNum"});
                  phone.save();
                  pagerNumArray.push(phone);
                }
              });
            });

            var faxNumArray = [];
            member.faxNum.forEach(function(phoneNum) {
              Phone.findOne({number: phoneNum, kind: "faxNum"}, function(err, faxNum) {
                if (!faxNum) {
                  phone = Phone({number : phoneNum, note : "", kind : "faxNum"});
                  phone.save();
                  faxNumArray.push(phone);
                }
              });
            });

            var email = null;
            var emailArray = [];
            member.email.forEach(function(email) {
              Email.findOne({email:email}, function(err,email) {
                if (!email) {
                  email = Email({email:email, note:"" });
                  email.save();
                  emailArray.push(email);
                }
              });
            });

            var p = Provider({
              firstName         : { fieldValue: member.firstName  },
              middleName        : { fieldValue: member.middleName },
              lastName          : { fieldValue: member.lastName   },
              cwid              : { fieldValue: member.cwid       },
              email             : emailArray,
              officePhone       : officePhoneArray,
              mobilePhone       : mobilePhoneArray,
              pagerNum          : pagerNumArray,
              NPI               : { fieldValue: member.NPI        },
              role              : { fieldValue: member.role       },
              honor             : { fieldValue: member.honor      },
              photo             : { fieldValue: member.photo      },
              contactPreference : { fieldValue: member.contactPreference},
              addresses         : []
            });

            p.save();
            careTeam_output.push(p);
          }
        });
        

        //Provider.update({cwid:member.cwid},member,{upsert: true},function(err, Provider) {
          //if(err) { console.log(err); }
        //});
      });

      return res.json(200,careTeam_output);
    }
  });
};

exports.provider = function(req, res) {
  var query = getQuery(req);
  var options = {
    url : service_url + '/2.0/zero/getProvider',
    qs  : query
  };

  request(options, function (error, response, body) {
    if (!error && response.statusCode == 200) {
      return res.json(200,body);
    }
  });
};

exports.updatePhoneNumber = function(req, response) {
  //req.params.id 

}
/*
exports.index = function(req, res) {
  Provider.find(function (err, Providers) {
    if(err) { return handleError(res, err); }
    return res.json(200, Providers);
  });
};


// Get a single Provider
exports.show = function(req, res) {
  Provider.findById(req.params.id, function (err, Provider) {
    if(err) { return handleError(res, err); }
    if(!Provider) { return res.send(404); }
    return res.json(Provider);
  });
};

// Creates a new Provider in the DB.
exports.create = function(req, res) {
  Provider.create(req.body, function(err, Provider) {
    if(err) { return handleError(res, err); }
    return res.json(201, Provider);
  });
};

// Updates an existing Provider in the DB.
exports.update = function(req, res) {
  if(req.body._id) { delete req.body._id; }
  Provider.findById(req.params.id, function (err, Provider) {
    if (err) { return handleError(res, err); }
    if(!Provider) { return res.send(404); }
    var updated = _.merge(Provider, req.body);
    updated.save(function (err) {
      if (err) { return handleError(res, err); }
      return res.json(200, Provider);
    });
  });
};

// Deletes a Provider from the DB.
exports.destroy = function(req, res) {
  Provider.findById(req.params.id, function (err, Provider) {
    if(err) { return handleError(res, err); }
    if(!Provider) { return res.send(404); }
    Provider.remove(function(err) {
      if(err) { return handleError(res, err); }
      return res.send(204);
    });
  });
};
*/

function handleError(res, err) {
  return res.send(500, err);
}